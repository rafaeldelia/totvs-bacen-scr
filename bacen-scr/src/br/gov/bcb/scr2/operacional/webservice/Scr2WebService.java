package br.gov.bcb.scr2.operacional.webservice;

import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by Apache CXF 2.6.16 2015-03-16T15:48:44.010-03:00 Generated source version: 2.6.16
 * 
 */

// Comentadas todas as referencias ao WSDL fixo.

@WebServiceClient(name = "Scr2WebService", wsdlLocation = "", // Deixado em branco porque a localizacao do WSDL varia entre a homologacao e
																// a producao
		targetNamespace = "http://webservice.operacional.scr2.bcb.gov.br/")
public class Scr2WebService extends Service {

	// public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://webservice.operacional.scr2.bcb.gov.br/", "Scr2WebService");
	public final static QName Scr2WebPort = new QName("http://webservice.operacional.scr2.bcb.gov.br/", "Scr2WebPort");
	// static {
	// URL url = null;
	// try {
	//// url = new URL("https://www9.bcb.gov.br//wsscr2/ControleCliente_homologa.xml?WSDL"); // aqui
	// System.out.println("passou por aqui");
	// url = new URL(""); // aqui
	//
	// } catch (MalformedURLException e) {
	// java.util.logging.Logger.getLogger(Scr2WebService.class.getName())
	// .log(java.util.logging.Level.INFO,
	// "Can not initialize the default wsdl from {0}", "https://www9.bcb.gov.br//wsscr2/ControleCliente_homologa.xml?WSDL");
	// }
	// WSDL_LOCATION = url;
	// }

	public Scr2WebService(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public Scr2WebService(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	// public Scr2WebService() {
	// super(WSDL_LOCATION, SERVICE);
	// }

	// This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
	// compliant code instead.
	// public Scr2WebService(WebServiceFeature ... features) {
	// super(WSDL_LOCATION, SERVICE, features);
	// }

	// This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
	// compliant code instead.
	public Scr2WebService(URL wsdlLocation, WebServiceFeature... features) {
		super(wsdlLocation, SERVICE, features);
	}

	// This constructor requires JAX-WS API 2.2. You will need to endorse the 2.2
	// API jar or re-run wsdl2java with "-frontend jaxws21" to generate JAX-WS 2.1
	// compliant code instead.
	public Scr2WebService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 *
	 * @return returns IScr2WebService
	 */
	@WebEndpoint(name = "Scr2WebPort")
	public IScr2WebService getScr2WebPort() {
		return super.getPort(Scr2WebPort, IScr2WebService.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default values.
	 * @return returns IScr2WebService
	 */
	@WebEndpoint(name = "Scr2WebPort")
	public IScr2WebService getScr2WebPort(WebServiceFeature... features) {
		return super.getPort(Scr2WebPort, IScr2WebService.class, features);
	}

}
